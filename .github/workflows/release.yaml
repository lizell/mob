on:
  release:
    types: [published]
name: Release
jobs:
  release:
    strategy:
      matrix:
        os: [linux, darwin, windows]
    env:
      GOARCH: amd64
      GOOS: ${{ matrix.os }}
    name: release
    runs-on: ubuntu-latest
    outputs:
      sha_linux: ${{ steps.shasum.outputs.sha_linux }}
    steps:
      - uses: actions/checkout@main
      - name: Use Go 1.16.x
        uses: actions/setup-go@v2
        with:
          go-version: '~1.16.0'
      - name: Test
        run: go test
        env:
          GOOS: linux # the tests will only run if the os matches the os of the system of run-on
      - name: Build
        run: go build -o mob${{ matrix.os == 'windows' && '.exe' || '' }}
        env:
          GOOS: ${{ matrix.os }}
      - name: Create release artifacts using .github/build
        run: .github/build
        env:
          VERSION: ${{ github.event.release.tag_name }}
      - name: Upload artifacts to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "*{.tar.gz,_checksum.txt}"
          tag: ${{ github.event.release.tag_name }}
          file_glob: true
      - name: Set SHA
        if: matrix.os == 'darwin' || matrix.os == 'linux'
        id: shasum
        run: |
          echo ::set-output name=sha_${{matrix.os}}::"$(shasum -a 256 *.tar.gz | awk '{printf $1}')"
      - name: Bump homebrew formula
        if: matrix.os == 'darwin'
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW }}
        run: |
          git config --global user.email "ci@example.com"
          git config --global user.name "CI"
          brew tap ${{github.repository_owner}}/homebrew-brew
          brew bump-formula-pr -f --version=${{ github.event.release.tag_name }} --no-browse --no-audit \
          --sha256=${{ steps.shasum.outputs.sha_darwin }} \
          --url="https://github.com/${{github.repository_owner}}/mob/releases/download/${{ github.event.release.tag_name }}/mob_${{ github.event.release.tag_name }}_darwin_amd64.tar.gz" \
          ${{github.repository_owner}}/homebrew-brew/mob

  publish-arch-linux-package:
    needs: [release]
    name: Publish Arch Linux package
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: mobsh-bin
    steps:
      - name: Create PKGBUILD
        run: |
          # Create the output directory
          mkdir -p ./aur/${{ env.PACKAGE_NAME }}/

          # Strip the leading "v" from the version
          PACKAGE_VERSION="$(echo "${{ github.event.release.tag_name }}" | sed -e 's/^v//')"

          # Output PKGBUILD
          cat > ./aur/${{ env.PACKAGE_NAME }}/PKGBUILD << EOF
          # Where to file issues: https://github.com/${{ github.repository }}/issues

          pkgname=${{ env.PACKAGE_NAME }}
          pkgver=$PACKAGE_VERSION
          pkgrel=1
          pkgdesc="Fast git handover with mob"
          arch=('x86_64')
          url="https://github.com/${{ github.repository }}"
          license=('MIT')
          depends=("git")
          optdepends=('espeak-ng-espeak: Multi-lingual software speech synthesizer'
                      'mbrola-voices-us1: An American English female voice for the MBROLA synthesizer')
          provides=('mobsh')
          conflicts=('mobsh' 'mob')

          source_x86_64=("\$url/releases/download/${{ github.event.release.tag_name }}/mob_${{ github.event.release.tag_name }}_linux_amd64.tar.gz")
          sha256sums_x86_64=("${{ needs.release.outputs.sha_linux }}")

          package() {
              install -D -m644 "LICENSE" "\$pkgdir/usr/share/licenses/\$pkgname/LICENSE"
              install -D -m755 "mob" "\$pkgdir/usr/bin/mob"
          }

          EOF
      - name: Store PKGBUILD as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: PKGBUILD
          path: ./aur/${{ env.PACKAGE_NAME }}/PKGBUILD
      - name: Publish AUR package
        uses: KSXGitHub/github-actions-deploy-aur@v2.2.5
        with:
          pkgname: ${{ env.PACKAGE_NAME }}
          pkgbuild: ./aur/${{ env.PACKAGE_NAME }}/PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package for ${{ github.event.release.tag_name }}
          ssh_keyscan_types: rsa,dsa,ecdsa,ed25519
